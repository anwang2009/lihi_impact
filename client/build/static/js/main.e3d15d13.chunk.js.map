{"version":3,"sources":["logo.svg","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","props","state","students","id","name","age","email","style","class","this","renderTableHeader","renderTableData","Object","keys","map","key","index","toUpperCase","student","Component","Home","About","Users","App","response","post","responseToPost","callApi","a","fetch","json","body","status","Error","message","handleSubmit","e","preventDefault","method","headers","JSON","stringify","text","setState","then","res","express","catch","err","console","log","className","to","path","src","logo","alt","href","target","rel","onSubmit","type","value","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3d15d13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\n\nclass Table extends Component {\n   constructor(props) {\n      super(props) //since we are extending class Table so we have to use super in order to override Component class constructor\n      this.state = { //state is by default an object\n         students: [\n            { id: 1, name: 'Ty Good', age: 21, email: 'ty@email.com' },\n            { id: 2, name: 'An Wang', age: 19, email: 'an@email.com' },\n            { id: 3, name: 'Tyler Dillon', age: 27, email: 't.dillon4884@gmail.com' },\n            { id: 4, name: 'Mikey Wilson', age: 25, email: 'mikey@email.com' },\n            { id: 5, name: 'Dishad Chopra', age: 25, email: 'dishad@email.com' },\n            { id: 4, name: 'Kushal Jhunjhunwalla', age: 25, email: 'kushal@email.com' },\n            { id: 4, name: 'Daniel Lee', age: 25, email: 'daniel@email.com' }\n         ]\n      }\n   }\n\n  render() {\n     return (\n      //applies css style for table\n        <div style={'Table.css'}>\n           <h1 class='title'>React Dynamic Table</h1>\n           <table class='students'>\n              <tbody>\n                 <tr>{this.renderTableHeader()}</tr>\n                 {this.renderTableData()}\n              </tbody>\n           </table>\n        </div>\n     )\n  }\n\n  renderTableHeader() {\n        let header = Object.keys(this.state.students[0])\n        return header.map((key, index) => {\n           return <th key={index}>{key.toUpperCase()}</th>\n        })\n     }\n\n  renderTableData() {\n        return this.state.students.map((student, index) => {\n           const { id, name, age, email } = student //destructuring\n           return (\n              <tr key={id}>\n                 <td>{id}</td>\n                 <td>{name}</td>\n                 <td>{age}</td>\n                 <td>{email}</td>\n              </tr>\n           )\n        })\n     }\n\n\n}\n\nexport default Table //exporting a com\n\n","import React, { Component } from 'react';\nimport Table from './components/Table.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n  \n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n  \n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n  };\n  \n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n    \n    this.setState({ responseToPost: body });\n  };\n  \nrender() {\n    return (\n      <div className=\"App\">\n        <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <p>{this.state.response}</p>\n        <Table/>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n      </div>\n    );\n  }\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}